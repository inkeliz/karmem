image: fedora/latest
shell: false
packages:
  - curl
  - nodejs
  - zig
  - clang
  - tar
  - wget
  - dpkg
  - git
  - diffutils
  - bzip2
  - lld-libs
  - lld
  - llvm
  - libicu
sources:
  - https://github.com/inkeliz/karmem
  - https://github.com/emscripten-core/emsdk
environment:
  PATH: /home/build/sdk:/home/build/sdk/go/bin:/home/build/go/bin:/usr/bin:/usr/local/bin/:/usr/local/bin/tinygo:/usr/local/lib/tinygo:/home/build/emsdk:/home/build/emsdk/upstream/emscripten:$PATH
  GOROOT: /home/build/sdk/go
secret:
  - 66c957f4-6e1b-4e45-864e-d96582c443b2
tasks:
  - allow_ssh: |
      mkdir -p ~/.ssh
      touch ~/.ssh/authorized_keys
      echo "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGeyBRVA3mwtptbxaOMokWvNNB8pv2k9Dmonb1zGxucz ed25519-key-20200515" > ~/.ssh/authorized_keys
  - install_go: |
      mkdir -p ~/sdk
      wget -q https://dl.google.com/go/go1.18.4.linux-amd64.tar.gz
      tar -xzf go1.18.4.linux-amd64.tar.gz -C ~/sdk
  - install_dotnet: |
      wget -q "https://download.visualstudio.microsoft.com/download/pr/9762c43b-6de2-44aa-928d-61bec028a330/ba4d124e5384ae5c5a4599afbc41b1bf/dotnet-sdk-7.0.100-preview.6.22352.1-linux-x64.tar.gz"
      tar -xzf dotnet-sdk-7.0.100-preview.6.22352.1-linux-x64.tar.gz -C ~/sdk
  - install_emascripten: |
      mkdir -p ~/sdk
      cd emsdk
      ./emsdk install latest
      ./emsdk activate latest
      # source ./emsdk_env.sh
  - install_tinygo: |
      wget -q https://github.com/tinygo-org/tinygo/releases/download/v0.24.0/tinygo_0.24.0_amd64.deb
      sudo dpkg -i tinygo_0.24.0_amd64.deb
  - install_as: |
      cd karmem
      npm install
  - install_swiftwasm: |
      cd ~
      wget -q https://github.com/swiftwasm/swift/releases/download/swift-wasm-5.7-SNAPSHOT-2022-07-29-a/swift-wasm-5.7-SNAPSHOT-2022-07-29-a-amazonlinux2_x86_64.tar.gz
      tar -xzf swift-wasm-5.7-SNAPSHOT-2022-07-29-a-amazonlinux2_x86_64.tar.gz
  - clear: |
      rm -r ~/karmem/benchmark/testdata/wasi/*
      rm -r ~/karmem/benchmark/km/*
  - test_karmem: | 
      cd ~/karmem/cmd/karmem/kmgen
      go test .
      cd ~/karmem/cmd/karmem/kmparser
      go test .
  - test_generate: |
      cd karmem/benchmark
      go run karmem.org/cmd/karmem build --golang -o "km" testdata/game.km
      go run karmem.org/cmd/karmem build --assemblyscript -o "km" testdata/game.km
      go run karmem.org/cmd/karmem build --zig -o "km" testdata/game.km
      go run karmem.org/cmd/karmem build --swift -o "km" testdata/game.km
      go run karmem.org/cmd/karmem build --c -o "km" testdata/game.km
      go run karmem.org/cmd/karmem build --dotnet -o "km" testdata/game.km
  - test_dotnet: |
      cd ~/karmem/benchmark/dotnet
      ~/sdk/dotnet workload restore
      cd ~/karmem/benchmark
      ~/sdk/dotnet build -c "Release" -p:IS_WASM=true -p:IS_KARMEM=true -o "testdata/wasi" "dotnet"
      go test -tags wasi,wazero,km,dotnet,nofuzz -v -bench=. -timeout 60m .
  - test_golang: |
      cd karmem/benchmark
      go test -tags km -v -bench=. .
  - test_tinygo: |
      cd karmem/benchmark
      tinygo build -target "wasi" -tags "km" -o "testdata/wasi/go.wasi" -gc conservative --no-debug -opt 2 -scheduler none -wasm-abi generic .
      go test -tags wasi,wazero,km,golang -v -bench=. .
  - test_zig: |
      cd karmem/benchmark
      zig build install -Dtarget="wasm32-wasi" -Drelease-fast
      go test -tags wasi,wazero,km,zig -v -bench=. .
  - test_c: |
      cd karmem/benchmark
      emcc c/main.c -o testdata/wasi/c.wasm -s "EXPORTED_FUNCTIONS=_InputMemoryPointer,_OutputMemoryPointer,__start,_KBenchmarkDecodeSumVec3,_KBenchmarkDecodeObjectAPI,_KBenchmarkEncodeObjectAPI, _KBenchmarkDecodeSumVec3" --no-entry -sALLOW_MEMORY_GROWTH -O3 -flto
      go test -tags wasi,wazero,km,c -v -bench=. .
  - test_as: |
      cd karmem/benchmark
      ../node_modules/.bin/asc main.ts -Ospeed --optimizeLevel 3 --target release --zeroFilledMemory --exportStart "_start" --outFile "./testdata/wasi/as.wasi"
      go test -tags wasi,wazero,km,assemblyscript -v -bench=. .
  - test_swift: |
      cd karmem/benchmark
      ~/swift-wasm-5.7-SNAPSHOT-2022-07-29-a/usr/bin/swift build --triple wasm32-unknown-wasi -v -c release
      ~/swift-wasm-5.7-SNAPSHOT-2022-07-29-a/usr/bin/swiftc -L ".build/wasm32-unknown-wasi/release" -o "testdata/wasi/swift.wasi" -module-name benchmark -emit-executable @.build/wasm32-unknown-wasi/release/benchmark.product/Objects.LinkFileList -target wasm32-unknown-wasi -sdk ~/swift-wasm-5.7-SNAPSHOT-2022-07-29-a/usr/share/wasi-sysroot -L ~/swift-wasm-5.7-SNAPSHOT-2022-07-29-a/usr/lib -O -Xlinker "--export=_start" -Xlinker "--export=InputMemoryPointer" -Xlinker "--export=OutputMemoryPointer" -Xlinker "--export=KBenchmarkEncodeObjectAPI" -Xlinker "--export=KBenchmarkDecodeObjectAPI" -Xlinker "--export=KBenchmarkDecodeSumVec3" -Xlinker "--export=KBenchmarkDecodeSumStats" -Xlinker "--export=KBenchmarkDecodeSumUint8" -Xlinker "--export=KNOOP"
      go test -tags wasi,wazero,km,swift -v -bench=. .
  - exit: |
      exit