{{- define "header"}}
import * as karmem from '{{FromTags "import"}}'

let _Null = new StaticArray<u8>({{.Size.Largest}})
let _NullReader = karmem.NewReader(_Null)

{{- end}}
{{define "enums"}}
{{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}
{{- range $root := .Enums}}

export type {{$root.Data.Name}} = {{ToType $root.Data.Type}};
{{- range $field := $root.Data.Fields }}
export const {{$root.Data.Name}}{{$field.Data.Name}} : {{$root.Data.Name}} = {{$field.Data.Value}}
{{- end }}
{{- end}}
{{end}}
{{define "enums_builder"}}
{{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}

{{end}}
{{define "struct"}}
{{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}

export type PacketIdentifier = u64
{{- range $root := .Structs}}
export const PacketIdentifier{{$root.Data.Name}} = {{$root.Data.ID}}
{{- end }}

{{range $root := .Structs}}

export class {{$root.Data.Name}} {
    {{- range $field := $root.Data.Fields }}
    {{ $field.Data.Name }}: {{ToType $field.Data.Type}};
    {{- end }}

    static PacketIdentifier() : PacketIdentifier {
        return PacketIdentifier{{$root.Data.Name}}
    }

    static Reset(x: {{$root.Data.Name}}): void {
        this.Read(x, changetype<{{$root.Data.Name}}Viewer>(changetype<usize>(_Null)), _NullReader)
    }

    @inline
    static WriteAsRoot(x: {{$root.Data.Name}}, writer: karmem.Writer): void {
        this.Write(x, writer, 0);
    }

    static Write(x: {{$root.Data.Name}}, writer: karmem.Writer, start: u32): boolean {
        let offset = start;
        const size: u32 = {{$root.Data.Size.Total}};
        if (offset == 0) {
            offset = writer.Alloc(size);
            if (offset == 0xFFFFFFFF) {
                return false;
            }
        }

        {{- if $root.Data.IsTable }}
        writer.WriteAt<u32>(offset, {{$root.Data.Size.Content}});
        {{- end }}

        {{- range $field := $root.Data.Fields }}
        {{- if not $field.Data.Type.IsInline}}
        {{- if $field.Data.Type.IsBasic}}
        const __{{$field.Data.Name}}Size: u32 = {{$field.Data.Size.Allocation}};
        {{- else}}
        {{- if $field.Data.Type.IsString }}
        const __{{$field.Data.Name}}String : Uint8Array = Uint8Array.wrap(String.UTF8.encode(x.{{$field.Data.Name}}, false))
        const __{{$field.Data.Name}}Size: u32 = {{$field.Data.Size.Allocation}} * __{{$field.Data.Name}}String.length;
        {{- else }}
        const __{{$field.Data.Name}}Size: u32 = {{$field.Data.Size.Allocation}} * x.{{$field.Data.Name}}.length;
        {{- end }}
        {{- end}}
        {{- end }}
        {{- if $field.Data.Type.IsInline }}
        let __{{$field.Data.Name}}Offset: u32 = offset + {{$field.Data.Offset}};
        {{- else }}
        let __{{$field.Data.Name}}Offset = writer.Alloc(__{{$field.Data.Name}}Size);
        if (__{{$field.Data.Name}}Offset == 0) {
            return false;
        }
        writer.WriteAt<u32>(offset +{{$field.Data.Offset}}, __{{$field.Data.Name}}Offset);
        {{- if $field.Data.Type.IsSlice}}
        writer.WriteAt<u32>(offset +{{$field.Data.Offset}} +4, __{{$field.Data.Name}}Size);
        {{- if not $root.Data.Packed }}
        writer.WriteAt<u32>(offset + {{$field.Data.Offset}} + 4 + 4, {{$field.Data.Size.Allocation}})
        {{- end }}
        {{- end}}
        {{- end }}
        {{- if or $field.Data.Type.IsNative $field.Data.Type.IsEnum }}
        {{- if $field.Data.Type.IsInline}}
        {{- if $field.Data.Type.IsArray}}
        writer.WriteArrayAt<{{ToType $field.Data.Type}}>(__{{$field.Data.Name}}Offset, x.{{$field.Data.Name}});
        {{- else}}
        writer.WriteAt<{{ToType $field.Data.Type}}>(__{{$field.Data.Name}}Offset, x.{{$field.Data.Name}});
        {{- end}}
        {{- else}}
        {{- if $field.Data.Type.IsSlice}}
        {{- if $field.Data.Type.IsString}}
        writer.WriteSliceAt<Uint8Array>(__{{$field.Data.Name}}Offset, __{{$field.Data.Name}}String);
        {{- else}}
        writer.WriteSliceAt<{{ToType $field.Data.Type}}>(__{{$field.Data.Name}}Offset, x.{{$field.Data.Name}});
        {{- end}}
        {{- else}}
        writer.WriteAt<{{ToType $field.Data.Type}}>(__{{$field.Data.Name}}Offset, x.{{$field.Data.Name}});
        {{- end}}
        {{- end}}
        {{- else }}
        {{- if $field.Data.Type.IsBasic}}
        if (!{{ToPlainType $field.Data.Type}}.Write(x.{{$field.Data.Name}}, writer, __{{$field.Data.Name}}Offset)) {
            return false;
        }
        {{- else}}
        let __{{$field.Data.Name}}Len = x.{{$field.Data.Name}}.length;
        for (let i = 0; i < __{{$field.Data.Name}}Len; i++) {
            if (!{{ToPlainType $field.Data.Type}}.Write(x.{{$field.Data.Name}}[i], writer, __{{$field.Data.Name}}Offset)) {
                return false;
            }
            __{{$field.Data.Name}}Offset += {{$field.Data.Size.Allocation}};
        }
        {{- end}}
        {{- end}}
        {{- end}}

        return true
    }

    @inline
    static ReadAsRoot(x: {{$root.Data.Name}}, reader: karmem.Reader) : void {
        this.Read(x, New{{$root.Data.Name}}Viewer(reader, 0), reader);
    }

    @inline
    static Read(x: {{$root.Data.Name}}, viewer: {{$root.Data.Name}}Viewer, reader: karmem.Reader) : void {
    {{- range $field := $root.Data.Fields }}
    {{- if $field.Data.Type.IsBasic}}
    {{- if $field.Data.Type.IsEnum}}
    x.{{$field.Data.Name}} = <{{ToType $field.Data.Type}}>viewer.{{$field.Data.Name}}();
    {{- else}}
    {{- if $field.Data.Type.IsNative}}
    x.{{$field.Data.Name}} = viewer.{{$field.Data.Name}}();
    {{- else}}
    {{ToType $field.Data.Type}}.Read(x.{{$field.Data.Name}}, viewer.{{$field.Data.Name}}({{- if not $field.Data.Type.IsInline}}reader{{- end}}), reader);
    {{- end}}
    {{- end}}
    {{- else}}
    {{- if $field.Data.Type.IsBasic}}
    {{ToType $field.Data.Type}}.Read(x.{{$field.Data.Name}}, viewer.{{$field.Data.Name}}(reader), reader);
    {{- end}}
    {{- if $field.Data.Type.IsString}}
    x.{{$field.Data.Name}} = viewer.{{$field.Data.Name}}(reader);
    {{- else}}
    {{- if $field.Data.Type.IsSlice}}
    let __{{$field.Data.Name}}Slice = viewer.{{$field.Data.Name}}(reader);
    let __{{$field.Data.Name}}Len = __{{$field.Data.Name}}Slice.length;
    let __{{$field.Data.Name}}DestLen = x.{{$field.Data.Name}}.length;
    if (__{{$field.Data.Name}}Len > __{{$field.Data.Name}}DestLen) {
        x.{{$field.Data.Name}}.length = __{{$field.Data.Name}}DestLen
        for (let i = __{{$field.Data.Name}}DestLen; i < __{{$field.Data.Name}}Len; i++) {
            {{- if $field.Data.Type.IsNative }}
            x.{{$field.Data.Name}}.push({{ToDefault $field.Data.Type}});
            {{- else }}
            x.{{$field.Data.Name}}.push(New{{ToPlainType $field.Data.Type}}());
            {{- end }}
        }
    }
    {{- else}}
    let __{{$field.Data.Name}}Slice = viewer.{{$field.Data.Name}}();
    let __{{$field.Data.Name}}Len = __{{$field.Data.Name}}Slice.length;
    for (let i = x.{{$field.Data.Name}}.length; i < __{{$field.Data.Name}}Len; i++) {
        {{- if $field.Data.Type.IsNative }}
        x.{{$field.Data.Name}}[i] = {{ToDefault $field.Data.Type}};
        {{- else }}
        x.{{$field.Data.Name}}[i] = New{{ToPlainType $field.Data.Type}}();
        {{- end }}
    }
    {{- end }}
    {{- if $field.Data.Type.IsNative}}
    for (let i = 0; i < __{{$field.Data.Name}}Len; i++) {
        x.{{$field.Data.Name}}[i] = __{{$field.Data.Name}}Slice[i];
    }
        {{- if $field.Data.Type.IsArray}}
    for (let i = __{{$field.Data.Name}}Len; i < x.{{$field.Data.Name}}.length; i++) {
        x.{{$field.Data.Name}}[i] = {{ToDefault $field.Data.Type}};
    }
        {{- end}}
    {{- else}}
    for (let i = 0; i < __{{$field.Data.Name}}Len; i++) {
        {{ToPlainType $field.Data.Type}}.Read(x.{{$field.Data.Name}}[i], __{{$field.Data.Name}}Slice[i], reader);
    }
        {{- if $field.Data.Type.IsArray}}
    for (let i = __{{$field.Data.Name}}Len; i < x.{{$field.Data.Name}}.length; i++) {
        {{ToPlainType $field.Data.Type}}.Reset(x.{{$field.Data.Name}}[i]);
    }
        {{- end }}
    {{- end }}
    {{- if $field.Data.Type.IsSlice}}
    x.{{$field.Data.Name}}.length = __{{$field.Data.Name}}Len;
    {{- end}}
    {{- end }}
    {{- end}}
    {{- end }}
    }

}

export function New{{$root.Data.Name}}(): {{$root.Data.Name}} {
    let x: {{$root.Data.Name}} = {
    {{- range $field := $root.Data.Fields }}
    {{- if $field.Data.Type.IsBasic}}
    {{- if or $field.Data.Type.IsNative $field.Data.Type.IsEnum}}
    {{ $field.Data.Name }}: {{ ToDefault $field.Data.Type }},
    {{- else}}
    {{ $field.Data.Name }}: New{{ToType $field.Data.Type}}(),
    {{- end}}
    {{- else}}
    {{- if $field.Data.Type.IsArray}}
    {{ $field.Data.Name }}: new {{ToType $field.Data.Type}}({{$field.Data.Type.Length}}),
    {{- end}}
    {{- if $field.Data.Type.IsSlice}}
    {{- if $field.Data.Type.IsString}}
    {{ $field.Data.Name }}: "",
    {{- else}}
    {{ $field.Data.Name }}: new {{ToType $field.Data.Type}}(0),
    {{- end}}
    {{- end}}
    {{- end}}
    {{- end}}
    }
    {{- range $field := $root.Data.Fields }}
    {{- if (and $field.Data.Type.IsArray)}}
    for (let i = 0; i < x.{{$field.Data.Name}}.length; i++) {
        {{- if (not $field.Data.Type.IsNative)}}
        x.{{$field.Data.Name}}[i] = New{{ToPlainType $field.Data.Type}}();
        {{- else}}
        x.{{$field.Data.Name}}[i] = {{ToDefault $field.Data.Type}};
        {{- end}}
    }
    {{- end}}
    {{- end}}
    return x;
}
{{- end}}
{{end}}
{{define "struct_builder"}}
{{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}
{{- range $root := .Structs}}
@unmanaged
export class {{$root.Data.Name}}Viewer {
    {{- range $key, $padding := $root.Data.Size.TotalGroup }}
    private _{{$key}}: {{ToType $padding.Data}};
    {{- end}}

    @inline
    SizeOf(): u32 {
        {{- if $root.Data.IsTable}}
        return load<u32>(changetype<usize>(this));
        {{- else}}
        return {{ $root.Data.Size.Total }};
        {{- end }}
    }

    {{- range $field := $root.Data.Fields }}
    @inline
    {{$field.Data.Name}}({{- if not $field.Data.Type.IsInline}}reader: karmem.Reader{{- end}}): {{ToTypeView $field.Data.Type}} {
    {{- if $root.Data.IsTable}}
        if ((<u32>{{$field.Data.Offset}} + <u32>{{$field.Data.Size.Field}}) > this.SizeOf()) {
            {{- if (or (and $field.Data.Type.IsNative $field.Data.Type.IsBasic) (or $field.Data.Type.IsString $field.Data.Type.IsEnum)) }}
            return {{ToDefault $field.Data.Type}}
            {{- else}}
            {{- if or $field.Data.Type.IsSlice $field.Data.Type.IsArray }}
            return new {{ToTypeView $field.Data.Type}}(0,0,0)
            {{- else}}
            return changetype<{{ToPlainTypeView $field.Data.Type}}>(changetype<usize>(_Null));
            {{- end}}
            {{- end}}
        }
    {{- end}}

        {{- if $field.Data.Type.IsInline}}
    {{- if not $field.Data.Type.IsArray}}
            {{- if or $field.Data.Type.IsNative $field.Data.Type.IsEnum}}
        return load<{{ToTypeView $field.Data.Type}}>(changetype<usize>(this) + {{$field.Data.Offset}});
            {{- else}}
        return changetype<{{ToTypeView $field.Data.Type}}>(changetype<usize>(this) + {{$field.Data.Offset}});
            {{- end}}
    {{- else}}
        return new {{ToTypeView $field.Data.Type}}(changetype<usize>(this) + {{$field.Data.Offset}}, {{$field.Data.Type.Length}}, {{$field.Data.Size.Allocation}});
    {{- end}}
        {{- else}}
        let offset: u32 = load<u32>(changetype<usize>(this) + {{$field.Data.Offset}});
            {{- if $field.Data.Type.IsSlice}}
        let size: u32 = load<u32>(changetype<usize>(this) + {{$field.Data.Offset}} +4);
                {{- if $field.Data.Type.IsString}}
        if (!reader.IsValidOffset(offset, size)) {
            return "";
        }
        return String.UTF8.decodeUnsafe(reader.Pointer + offset, size, false);
                {{- else}}
        if (!reader.IsValidOffset(offset, size)) {
            return new {{ToTypeView $field.Data.Type}}(0, 0, 0);
        }
        let length = size / {{$field.Data.Size.Allocation}};
        {{- if $field.Data.Type.IsLimited }}
        if (length > {{$field.Data.Type.Length}}) {
            length = {{$field.Data.Type.Length}};
        }
        {{- end }}
        return new {{ToTypeView $field.Data.Type}}(reader.Pointer + offset, length, {{$field.Data.Size.Allocation}});
                {{- end}}
            {{- else}}
        return New{{ToTypeView $field.Data.Type}}(reader, offset)
            {{- end}}
        {{- end}}
    }
    {{- end}}
}

@inline export function New{{$root.Data.Name}}Viewer(reader: karmem.Reader, offset: u32): {{$root.Data.Name}}Viewer {
    if (!reader.IsValidOffset(offset, {{$root.Data.Size.Minimum}})) {
        return changetype<{{$root.Data.Name}}Viewer>(changetype<usize>(_Null))
    }

    let v: {{$root.Data.Name}}Viewer = changetype<{{$root.Data.Name}}Viewer>(reader.Pointer + offset)
    {{- if $root.Data.IsTable}}
    if (!reader.IsValidOffset(offset, v.SizeOf())) {
        return changetype<{{$root.Data.Name}}Viewer>(changetype<usize>(_Null))
    }
    {{- end}}
    return v
}
{{- end}}
{{end}}