{{define "header"}}
#include "stdint.h"
#include "stdlib.h"
#include "string.h"
#include "stdbool.h"
#include "{{FromTags "import"}}"

uint8_t _Null[{{.Size.Largest}}];
{{end}}

{{define "enums"}}
    {{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}
    {{- range $root := .Enums}}

typedef {{ToType $root.Data.Type}} Enum{{$root.Data.Name}};
{{- range $field := $root.Data.Fields }}
const Enum{{$root.Data.Name}} Enum{{$root.Data.Name}}{{$field.Data.Name}} = {{$field.Data.Value}}UL;
{{- end }}
    {{- end}}
{{end}}

{{define "enums_builder"}}
    {{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}

{{end}}

{{define "struct"}}
    {{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}

typedef uint64_t EnumPacketIdentifier;
{{$global := .}}
{{- range $root := .Structs}}
const EnumPacketIdentifier EnumPacketIdentifier{{$root.Data.Name}} = {{$root.Data.ID}}UL;
{{- end }}

    {{range $root := .Structs}}
typedef struct {
{{- range $field := $root.Data.Fields }}
    {{- if $field.Data.Type.IsBasic }}
    {{ToType $field.Data.Type}} {{ $field.Data.Name }};
    {{- end }}
    {{- if $field.Data.Type.IsSlice }}
    {{ToType $field.Data.Type}} {{ $field.Data.Name }};
    uint32_t _{{ $field.Data.Name }}_len;
    uint32_t _{{ $field.Data.Name }}_cap;
    {{- end }}
    {{- if $field.Data.Type.IsArray }}
    {{ToType $field.Data.Type}} {{ $field.Data.Name }}[{{$field.Data.Type.Length}}];
    {{- end }}
{{- end }}
} {{$root.Data.Name}};

EnumPacketIdentifier {{$root.Data.Name}}PacketIdentifier({{$root.Data.Name}} * x) {
    return EnumPacketIdentifier{{$root.Data.Name}};
}

uint32_t {{$root.Data.Name}}Write({{$root.Data.Name}} * x, KarmemWriter * writer, uint32_t start) {
    uint32_t offset = start;
    uint32_t size = {{$root.Data.Size.Total}};
    if (offset == 0) {
        offset = KarmemWriterAlloc(writer, size);
        if (offset == 0xFFFFFFFF) {
            return 0;
        }
    }


    {{- if $root.Data.IsTable }}
    uint32_t sizeData = {{$root.Data.Size.Content}};
    KarmemWriterWriteAt(writer, offset, (void *)&sizeData, 4);
    {{- end }}

{{- range $field := $root.Data.Fields }}
{{- if or (not $field.Data.Type.IsInline) $field.Data.Type.IsArray }}
{{- if $field.Data.Type.IsBasic}}
    uint32_t __{{$field.Data.Name}}Size = {{$field.Data.Size.Allocation}};
{{- else}}
    {{- if $field.Data.Type.IsSlice }}
    uint32_t __{{$field.Data.Name}}Size = {{$field.Data.Size.Allocation}} * x->_{{$field.Data.Name}}_len;
    {{- else }}
    uint32_t __{{$field.Data.Name}}Size = {{$field.Data.Size.Field}};
    {{- end }}
{{- end}}
{{- end}}
{{- if $field.Data.Type.IsInline }}
    uint32_t __{{$field.Data.Name}}Offset = offset + {{$field.Data.Offset}};
{{- else }}
    uint32_t __{{$field.Data.Name}}Offset = KarmemWriterAlloc(writer, __{{$field.Data.Name}}Size);

    KarmemWriterWriteAt(writer, offset+{{$field.Data.Offset}}, (void *) &__{{$field.Data.Name}}Offset, 4);
    {{- if $field.Data.Type.IsSlice}}
    KarmemWriterWriteAt(writer, offset+{{$field.Data.Offset}}+4, (void *) &__{{$field.Data.Name}}Size, 4);
    {{- if not $root.Data.Packed }}
    uint32_t __{{$field.Data.Name}}SizeEach = {{$field.Data.Size.Allocation}};
    KarmemWriterWriteAt(writer, offset+{{$field.Data.Offset}}+4+4, (void *) &__{{$field.Data.Name}}SizeEach, 4);
    {{- end }}
    {{- end }}
{{- end }}
{{- if or $field.Data.Type.IsNative $field.Data.Type.IsEnum }}
    {{- if $field.Data.Type.IsSlice }}
    KarmemWriterWriteAt(writer, __{{$field.Data.Name}}Offset, (void *) x->{{$field.Data.Name}}, __{{$field.Data.Name}}Size);
    {{- else }}
        {{- if $field.Data.Type.IsArray }}
    KarmemWriterWriteAt(writer, __{{$field.Data.Name}}Offset,(void *) x->{{$field.Data.Name}}, __{{$field.Data.Name}}Size);
        {{- else }}
    KarmemWriterWriteAt(writer, __{{$field.Data.Name}}Offset, (void *) &x->{{$field.Data.Name}}, {{$field.Data.Size.Allocation}});
        {{- end }}
    {{- end }}
{{- else }}
    {{- if $field.Data.Type.IsBasic}}
    if ({{ToPlainType $field.Data.Type}}Write(&x->{{$field.Data.Name}}, writer, __{{$field.Data.Name}}Offset) == 0) {
        return 0;
    }
    {{- else}}
    uint32_t __{{$field.Data.Name}}Index = 0;
    uint32_t __{{$field.Data.Name}}End = __{{$field.Data.Name}}Offset + __{{$field.Data.Name}}Size;
    while (__{{$field.Data.Name}}Offset < __{{$field.Data.Name}}End) {
        if ({{ToPlainType $field.Data.Type}}Write(&x->{{$field.Data.Name}}[__{{$field.Data.Name}}Index], writer, __{{$field.Data.Name}}Offset) == 0) {
            return 0;
        }
        __{{$field.Data.Name}}Offset = __{{$field.Data.Name}}Offset + {{$field.Data.Size.Allocation}};
        __{{$field.Data.Name}}Index = __{{$field.Data.Name}}Index + 1;
    }
    {{- end}}
{{- end}}
{{- end}}

    return offset;
}

uint32_t {{$root.Data.Name}}WriteAsRoot({{$root.Data.Name}} * x, KarmemWriter * writer) {
    return {{$root.Data.Name}}Write(x, writer, 0);
}

void {{$root.Data.Name}}Read({{$root.Data.Name}} * x, {{$root.Data.Name}}Viewer * viewer, KarmemReader * reader) {
    {{- range $field := $root.Data.Fields }}

{{- if $field.Data.Type.IsBasic}}
{{- if (or $field.Data.Type.IsEnum $field.Data.Type.IsNative) }}
    x->{{$field.Data.Name}} = {{$root.Data.Name}}Viewer_{{$field.Data.Name}}(viewer);
{{- else}}
    {{ToPlainType $field.Data.Type}}Read(&x->{{$field.Data.Name}}, {{$root.Data.Name}}Viewer_{{$field.Data.Name}}(viewer{{- if not $field.Data.Type.IsInline}}, reader{{- end}}), reader);
{{- end}}
{{- else}}
{{- if $field.Data.Type.IsSlice}}
    {{ToTypeView $field.Data.Type}} __{{$field.Data.Name}}Slice = {{$root.Data.Name}}Viewer_{{$field.Data.Name}}(viewer, reader);
    uint32_t __{{$field.Data.Name}}Len = {{$root.Data.Name}}Viewer_{{$field.Data.Name}}Length(viewer, reader);
    if (__{{$field.Data.Name}}Len > x->_{{$field.Data.Name}}_cap) {
        uint32_t __{{$field.Data.Name}}CapacityTarget = __{{$field.Data.Name}}Len;
        {{- if $field.Data.Type.IsString}}
        x->{{$field.Data.Name}} = ({{ToPlainType $field.Data.Type}}) realloc(x->{{$field.Data.Name}}, __{{$field.Data.Name}}CapacityTarget);
        {{- else }}
        x->{{$field.Data.Name}} = ({{ToPlainType $field.Data.Type}} *) realloc(x->{{$field.Data.Name}}, __{{$field.Data.Name}}CapacityTarget * sizeof({{ToPlainType $field.Data.Type}}));
        {{- end }}
        uint32_t __{{$field.Data.Name}}NewIndex = x->_{{$field.Data.Name}}_cap;
        while (__{{$field.Data.Name}}NewIndex < __{{$field.Data.Name}}CapacityTarget) {
            {{- if $field.Data.Type.IsNative}}
                {{- if $field.Data.Type.IsString }}
            x->{{$field.Data.Name}}[__{{$field.Data.Name}}NewIndex] = 0;
                {{- else }}
            x->{{$field.Data.Name}}[__{{$field.Data.Name}}NewIndex] = {{ToDefault $field.Data.Type}};
                {{- end }}
            {{- else }}
            x->{{$field.Data.Name}}[__{{$field.Data.Name}}NewIndex] = New{{ToPlainType $field.Data.Type}}();
            {{- end }}
            __{{$field.Data.Name}}NewIndex = __{{$field.Data.Name}}NewIndex + 1;
        }
        x->_{{$field.Data.Name}}_cap = __{{$field.Data.Name}}CapacityTarget;
    }
    if (__{{$field.Data.Name}}Len > x->_{{$field.Data.Name}}_len) {
        x->_{{$field.Data.Name}}_len = __{{$field.Data.Name}}Len;
    }
{{- else}}
    {{ToTypeView $field.Data.Type}} __{{$field.Data.Name}}Slice = {{$root.Data.Name}}Viewer_{{$field.Data.Name}}(viewer);
    uint32_t __{{$field.Data.Name}}Len = {{$root.Data.Name}}Viewer_{{$field.Data.Name}}Length(viewer);
    if (__{{$field.Data.Name}}Len > {{$field.Data.Type.Length}}) {
        __{{$field.Data.Name}}Len = {{$field.Data.Type.Length}};
    }
{{- end }}
{{- if $field.Data.Type.IsNative}}
    uint32_t __{{$field.Data.Name}}Index = 0;
    while (__{{$field.Data.Name}}Index < __{{$field.Data.Name}}Len) {
        x->{{$field.Data.Name}}[__{{$field.Data.Name}}Index] = __{{$field.Data.Name}}Slice[__{{$field.Data.Name}}Index];
        __{{$field.Data.Name}}Index = __{{$field.Data.Name}}Index + 1;
    }
    {{- if $field.Data.Type.IsArray}}
    while (__{{$field.Data.Name}}Index < {{$field.Data.Type.Length}}) {
        {{- if $field.Data.Type.IsString}}
        x->{{$field.Data.Name}}[__{{$field.Data.Name}}Index] = 0;
        {{- else }}
        x->{{$field.Data.Name}}[__{{$field.Data.Name}}Index] = {{ToDefault $field.Data.Type}};
        {{- end }}
        __{{$field.Data.Name}}Index = __{{$field.Data.Name}}Index + 1;
    }
    {{- end}}
{{- else}}
    uint32_t __{{$field.Data.Name}}Index = 0;
    while (__{{$field.Data.Name}}Index < __{{$field.Data.Name}}Len) {
        {{ToPlainType $field.Data.Type}}Read(&x->{{$field.Data.Name}}[__{{$field.Data.Name}}Index], &__{{$field.Data.Name}}Slice[__{{$field.Data.Name}}Index], reader);
         __{{$field.Data.Name}}Index = __{{$field.Data.Name}}Index + 1;
    }
    {{- if $field.Data.Type.IsArray}}
    while (__{{$field.Data.Name}}Index < {{$field.Data.Type.Length}}) {
        {{ToPlainType $field.Data.Type}}Reset(&x->{{$field.Data.Name}}[__{{$field.Data.Name}}Index]);
        __{{$field.Data.Name}}Index = __{{$field.Data.Name}}Index + 1;
    }
    {{- end}}
{{- end }}
{{- if $field.Data.Type.IsSlice}}
    x->_{{$field.Data.Name}}_len = __{{$field.Data.Name}}Len;
{{- end }}
    {{- end}}
{{- end }}
}

void {{$root.Data.Name}}ReadAsRoot({{$root.Data.Name}} * x, KarmemReader * reader) {
    return {{$root.Data.Name}}Read(x, New{{$root.Data.Name}}Viewer(reader, 0), reader);
}

void {{$root.Data.Name}}Reset({{$root.Data.Name}} * x) {
    KarmemReader reader = KarmemNewReader(&_Null[0], {{$global.Size.Largest}});
    {{$root.Data.Name}}Read(x, ({{$root.Data.Name}}Viewer *) &_Null, &reader);
}

{{$root.Data.Name}} New{{$root.Data.Name}}() {
    {{$root.Data.Name}} r;
    memset(&r, 0, sizeof({{$root.Data.Name}}));
    return r;
}

    {{- end }}
{{end}}

{{define "struct_builder"}}
    {{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}
    {{- range $root := .Structs}}

#pragma pack(1)
typedef struct __attribute__((packed)) {
    uint8_t _data[{{$root.Data.Size.Total}}];
} {{$root.Data.Name}}Viewer;
#pragma options align=reset

uint32_t {{$root.Data.Name}}ViewerSize({{$root.Data.Name}}Viewer * x) {
{{- if $root.Data.IsTable}}
    uint32_t r;
    memcpy(&r, x, 4);
    return r;
{{- else}}
    return {{$root.Data.Size.Total}};
{{- end }}
}

{{$root.Data.Name}}Viewer * New{{$root.Data.Name}}Viewer(KarmemReader * reader, uint32_t offset) {
    if (KarmemReaderIsValidOffset(reader, offset, {{$root.Data.Size.Minimum}}) == false) {
        return ({{$root.Data.Name}}Viewer *) &_Null;
    }
    {{$root.Data.Name}}Viewer * v = ({{$root.Data.Name}}Viewer *) &reader->pointer[offset];
{{- if $root.Data.IsTable}}
    if (KarmemReaderIsValidOffset(reader, offset, {{$root.Data.Name}}ViewerSize(v)) == false) {
        return ({{$root.Data.Name}}Viewer *) &_Null;
    }
{{- end}}
    return v;
}

    {{- range $field := $root.Data.Fields }}

    {{- if $field.Data.Type.IsArray}}
uint32_t {{$root.Data.Name}}Viewer_{{$field.Data.Name}}Length({{$root.Data.Name}}Viewer * x) {
    if (({{$field.Data.Offset}} + {{$field.Data.Size.Field}}) > {{$root.Data.Name}}ViewerSize(x)) {
        return 0;
    }
    return {{$field.Data.Type.Length}};
}
    {{- end}}

    {{- if $field.Data.Type.IsSlice}}
uint32_t {{$root.Data.Name}}Viewer_{{$field.Data.Name}}Length({{$root.Data.Name}}Viewer * x, KarmemReader * reader) {
    if (({{$field.Data.Offset}} + {{$field.Data.Size.Field}}) > {{$root.Data.Name}}ViewerSize(x)) {
        return 0;
    }
    uint32_t offset;
    memcpy(&offset, &x->_data[{{$field.Data.Offset}}], 4);
    uint32_t size;
    memcpy(&size, &x->_data[{{$field.Data.Offset}} + 4], 4);
    if (KarmemReaderIsValidOffset(reader, offset, size) == false) {
        return 0;
    }
    uint32_t length = size / {{$field.Data.Size.Allocation}};
    {{- if $field.Data.Type.IsLimited }}
    if (length > {{$field.Data.Type.Length}}) {
        length = {{$field.Data.Type.Length}};
    }
    {{- end }}
    return length;
}
    {{- end}}

{{ToTypeView $field.Data.Type}} {{$root.Data.Name}}Viewer_{{$field.Data.Name}}({{$root.Data.Name}}Viewer * x{{- if not $field.Data.Type.IsInline}}, KarmemReader * reader{{- end}}) {
    {{- if $root.Data.IsTable}}
    if (({{$field.Data.Offset}} + {{$field.Data.Size.Field}}) > {{$root.Data.Name}}ViewerSize(x)) {
    {{- if or (and $field.Data.Type.IsBasic $field.Data.Type.IsNative) $field.Data.Type.IsEnum }}
        return {{ToDefault $field.Data.Type}};
    {{- else}}
        return ({{ToTypeView $field.Data.Type}}) &_Null;
    {{- end}}
    }
    {{- end}}

    {{- if $field.Data.Type.IsInline}}
{{- if not $field.Data.Type.IsArray}}
    {{- if $field.Data.Type.IsNative}}
    {{ToTypeView $field.Data.Type}} r;
    memcpy(&r, &x->_data[{{$field.Data.Offset}}], {{$field.Data.Size.Field}});
    return r;
    {{- else }}
    {{- if $field.Data.Type.IsEnum}}
        return * ({{ToTypeView $field.Data.Type}} * ) &x->_data[{{$field.Data.Offset}}];
    {{- else }}
        return ({{ToTypeView $field.Data.Type}}) &x->_data[{{$field.Data.Offset}}];
    {{- end }}
    {{- end}}
{{- else}}
    return ({{ToTypeView $field.Data.Type}}) &x->_data[{{$field.Data.Offset}}];
{{- end}}
{{- else }}
    uint32_t offset;
    memcpy(&offset, &x->_data[{{$field.Data.Offset}}], 4);
{{- if $field.Data.Type.IsSlice}}
    uint32_t size;
    memcpy(&size, &x->_data[{{$field.Data.Offset}} + 4], 4);
    if (KarmemReaderIsValidOffset(reader, offset, size) == false) {
    {{- if or (and $field.Data.Type.IsBasic $field.Data.Type.IsNative) $field.Data.Type.IsEnum }}
        return {{ToDefault $field.Data.Type}};
    {{- else}}
        {{- if (and $field.Data.Type.IsInline $field.Data.Type.IsNative) }}
        return *({{ToTypeView $field.Data.Type}} *) &_Null;
        {{- else  }}
        return ({{ToTypeView $field.Data.Type}}) &_Null;
        {{- end }}
    {{- end}}
    }
    uint32_t length = size / {{$field.Data.Size.Allocation}};
    return ({{ToTypeView $field.Data.Type}}) &reader->pointer[offset];
{{- else}}
    return New{{ToPlainType $field.Data.Type}}Viewer(reader, offset);
{{- end}}
{{- end}}
}
{{- end}}
    {{- end }}
{{end}}