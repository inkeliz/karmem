{{- define "header"}}
    package {{FromTags "package"}}

    import (
    karmem "{{FromTags "import"}}"
    "unsafe"
    )

    var _ unsafe.Pointer

    var _Null = make([]byte, {{.Size.Largest}})
    var _NullReader = karmem.NewReader(_Null)
{{end}}

{{define "enums"}}
    {{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}
    {{- range $root := .Enums}}
        type (
        {{$root.Data.Name}} {{ToType $root.Data.Type}}
        )

        const (
        {{- range $field := $root.Data.Fields }}
            {{$root.Data.Name}}{{$field.Data.Name}} {{$root.Data.Name}} = {{$field.Data.Value}}
        {{- end }}
        )

    {{- end}}
{{end}}

{{define "enums_builder"}}
    {{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}

{{end}}

{{define "struct"}}

    type (
    PacketIdentifier uint64
    )

    const (
    {{- range $root := .Structs}}
        PacketIdentifier{{$root.Data.Name}} = {{$root.Data.ID}}
    {{- end }}
    )

    {{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}
    {{range $root := .Structs}}
        type {{$root.Data.Name}} struct {
        {{- range $field := $root.Data.Fields }}
            {{ $field.Data.Name }} {{ToType $field.Data.Type}}
        {{- end }}
        }

        func New{{$root.Data.Name}}() {{$root.Data.Name}} {
        return {{$root.Data.Name}}{}
        }

        func (x *{{$root.Data.Name}}) PacketIdentifier() PacketIdentifier {
        return PacketIdentifier{{$root.Data.Name}}
        }

        func (x *{{$root.Data.Name}}) Reset() {
        x.Read((*{{$root.Data.Name}}Viewer)(unsafe.Pointer(&_Null)), _NullReader)
        }

        func (x *{{$root.Data.Name}}) WriteAsRoot(writer *karmem.Writer) (offset uint, err error) {
        return x.Write(writer, 0)
        }

        func (x *{{$root.Data.Name}}) Write(writer *karmem.Writer, start uint) (offset uint, err error) {
        offset = start
        size := uint({{$root.Data.Size.Total}})
        if offset == 0 {
        offset, err = writer.Alloc(size)
        if err != nil {
        return 0, err
        }
        }

        {{- if $root.Data.IsTable}}
            writer.Write4At(offset, uint32({{$root.Data.Size.Content}}))
        {{- end}}

        {{- range $field := $root.Data.Fields }}
            {{- if not $field.Data.Type.IsInline}}
                {{- if $field.Data.Type.IsBasic}}
                    __{{$field.Data.Name}}Size := uint({{$field.Data.Size.Allocation}})
                {{- else}}
                    __{{$field.Data.Name}}Size := uint({{$field.Data.Size.Allocation}} * len(x.{{$field.Data.Name}}))
                {{- end}}
            {{- end }}
            {{- if $field.Data.Type.IsInline }}
                __{{$field.Data.Name}}Offset := offset+{{$field.Data.Offset}}
            {{- else }}
                __{{$field.Data.Name}}Offset, err := writer.Alloc(__{{$field.Data.Name}}Size)
                if err != nil {
                return 0, err
                }
                writer.Write4At(offset+{{$field.Data.Offset}}, uint32(__{{$field.Data.Name}}Offset))
                {{- if $field.Data.Type.IsSlice}}
                    writer.Write4At(offset+{{$field.Data.Offset}} + 4, uint32(__{{$field.Data.Name}}Size))
                        {{- if not $root.Data.Packed }}
                    writer.Write4At(offset+{{$field.Data.Offset}} + 4 + 4, {{$field.Data.Size.Allocation}})
                        {{- end}}
                {{- end }}
            {{- end }}
            {{- if or $field.Data.Type.IsNative $field.Data.Type.IsEnum }}
                {{- if $field.Data.Type.IsInline}}
                    {{- if $field.Data.Type.IsArray }}
                        writer.WriteAt(__{{$field.Data.Name}}Offset, (*[{{$field.Data.Size.Field}}]byte)(unsafe.Pointer(&x.{{$field.Data.Name}}))[:])
                    {{- else }}
                        {{- if eq $field.Data.Size.Allocation 1}}
                            writer.Write1At(__{{$field.Data.Name}}Offset, *(*uint8)(unsafe.Pointer(&x.{{$field.Data.Name}})))
                        {{- end}}
                        {{- if eq $field.Data.Size.Allocation 2}}
                            writer.Write2At(__{{$field.Data.Name}}Offset, *(*uint16)(unsafe.Pointer(&x.{{$field.Data.Name}})))
                        {{- end}}
                        {{- if eq $field.Data.Size.Allocation 4}}
                            writer.Write4At(__{{$field.Data.Name}}Offset, *(*uint32)(unsafe.Pointer(&x.{{$field.Data.Name}})))
                        {{- end}}
                        {{- if eq $field.Data.Size.Allocation 8}}
                            writer.Write8At(__{{$field.Data.Name}}Offset, *(*uint64)(unsafe.Pointer(&x.{{$field.Data.Name}})))
                        {{- end}}
                    {{- end}}
                {{- else}}
                    {{- if $field.Data.Type.IsSlice}}
                        {{- if $field.Data.Type.IsString}}
                            __{{$field.Data.Name}}Slice := [3]uint{*(*uint)(unsafe.Pointer(&x.{{$field.Data.Name}})), __{{$field.Data.Name}}Size, __{{$field.Data.Name}}Size}
                            writer.WriteAt(__{{$field.Data.Name}}Offset, *(*[]byte)(unsafe.Pointer(&__{{$field.Data.Name}}Slice)))
                        {{- else}}
                            __{{$field.Data.Name}}Slice := *(*[3]uint)(unsafe.Pointer(&x.{{$field.Data.Name}}))
                            __{{$field.Data.Name}}Slice[1] = __{{$field.Data.Name}}Size
                            __{{$field.Data.Name}}Slice[2] = __{{$field.Data.Name}}Size
                            writer.WriteAt(__{{$field.Data.Name}}Offset, *(*[]byte)(unsafe.Pointer(&__{{$field.Data.Name}}Slice)))
                        {{- end}}
                    {{- else}}
                        _{{$field.Data.Name}}Slice := [3]uint{uint(uintptr(unsafe.Pointer(&x.{{$field.Data.Name}}))), __{{$field.Data.Name}}Size, __{{$field.Data.Name}}Size}
                        writer.WriteAt(__{{$field.Data.Name}}Offset, *(*[]byte)(unsafe.Pointer(&__{{$field.Data.Name}}Slice)))
                    {{- end}}
                {{- end}}
            {{- else }}
                {{- if $field.Data.Type.IsBasic}}
                    if _, err := x.{{$field.Data.Name}}.Write(writer, __{{$field.Data.Name}}Offset); err != nil {
                    return offset, err
                    }
                {{- else}}
                    for i := range x.{{$field.Data.Name}} {
                    if _, err := x.{{$field.Data.Name}}[i].Write(writer, __{{$field.Data.Name}}Offset); err != nil {
                    return offset, err
                    }
                    __{{$field.Data.Name}}Offset += {{$field.Data.Size.Allocation}}
                    }
                {{- end}}
            {{- end}}

        {{- end}}

        return offset, nil
        }

        func (x *{{$root.Data.Name}}) ReadAsRoot(reader *karmem.Reader) {
        x.Read(New{{$root.Data.Name}}Viewer(reader, 0), reader)
        }

        func (x *{{$root.Data.Name}}) Read(viewer *{{$root.Data.Name}}Viewer, reader *karmem.Reader) {
        {{- range $field := $root.Data.Fields }}

            {{- if $field.Data.Type.IsBasic}}
                {{- if $field.Data.Type.IsEnum}}
                    x.{{$field.Data.Name}} = {{ToType $field.Data.Type}}(viewer.{{$field.Data.Name}}())
                {{- else}}
                    {{- if $field.Data.Type.IsNative}}
                        x.{{$field.Data.Name}} = viewer.{{$field.Data.Name}}()
                    {{- else}}
                        x.{{$field.Data.Name}}.Read(viewer.{{$field.Data.Name}}({{- if not $field.Data.Type.IsInline}}reader{{- end}}), reader)
                    {{- end}}
                {{- end}}
            {{- else}}
                {{- if $field.Data.Type.IsBasic}}
                    x.{{$field.Data.Name}}.Read(viewer.{{$field.Data.Name}}(reader), reader)
                {{- end}}
                {{- if $field.Data.Type.IsString}}
                    __{{$field.Data.Name}}String := viewer.{{$field.Data.Name}}(reader)
                    if x.{{$field.Data.Name}} != __{{$field.Data.Name}}String {
                    __{{$field.Data.Name}}StringCopy := make([]byte, len(__{{$field.Data.Name}}String))
                    copy(__{{$field.Data.Name}}StringCopy, __{{$field.Data.Name}}String)
                    x.{{$field.Data.Name}} = *(*string)(unsafe.Pointer(&__{{$field.Data.Name}}StringCopy))
                    }
                {{- else}}
                    {{- if $field.Data.Type.IsSlice}}
                        __{{$field.Data.Name}}Slice := viewer.{{$field.Data.Name}}(reader)
                        __{{$field.Data.Name}}Len := len(__{{$field.Data.Name}}Slice)
                        if __{{$field.Data.Name}}Len > cap(x.{{$field.Data.Name}}) {
                        x.{{$field.Data.Name}} = append(x.{{$field.Data.Name}}, make([]{{ToPlainType $field.Data.Type}}, __{{$field.Data.Name}}Len - len(x.{{$field.Data.Name}}))...)
                        }
                        if __{{$field.Data.Name}}Len > len(x.{{$field.Data.Name}}) {
                            x.{{$field.Data.Name}} = x.{{$field.Data.Name}}[:__{{$field.Data.Name}}Len]
                        }
                    {{- else}}
                        __{{$field.Data.Name}}Slice := viewer.{{$field.Data.Name}}()
                        __{{$field.Data.Name}}Len := len(__{{$field.Data.Name}}Slice)
                        if __{{$field.Data.Name}}Len > {{$field.Data.Type.Length}} {
                            __{{$field.Data.Name}}Len = {{$field.Data.Type.Length}}
                        }
                    {{- end }}
                    {{- if $field.Data.Type.IsNative}}
                        {{- if $field.Data.Type.IsArray}}
                            copy(x.{{$field.Data.Name}}[:], __{{$field.Data.Name}}Slice)
                        {{- else}}
                            copy(x.{{$field.Data.Name}}, __{{$field.Data.Name}}Slice)
                        {{- end}}
                        {{- if $field.Data.Type.IsArray}}
                            for i := __{{$field.Data.Name}}Len; i < len(x.{{$field.Data.Name}}); i++ {
                                x.{{$field.Data.Name}}[i] = {{ToDefault $field.Data.Type}}
                            }
                        {{- end}}
                    {{- else}}
                        for i := 0; i < __{{$field.Data.Name}}Len; i++ {
                            x.{{$field.Data.Name}}[i].Read(&__{{$field.Data.Name}}Slice[i], reader)
                        }
                        {{- if $field.Data.Type.IsArray}}
                            for i := __{{$field.Data.Name}}Len; i < len(x.{{$field.Data.Name}}); i++ {
                                x.{{$field.Data.Name}}[i].Reset()
                            }
                        {{- end}}
                    {{- end }}
                    {{- if $field.Data.Type.IsSlice}}
                        x.{{$field.Data.Name}} = x.{{$field.Data.Name}}[:__{{$field.Data.Name}}Len]
                    {{- end }}
                {{- end }}
            {{- end}}
        {{- end }}
        }
    {{- end }}
{{end}}



{{define "struct_builder"}}
    {{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}
    {{- range $root := .Structs}}
        type {{$root.Data.Name}}Viewer [{{$root.Data.Size.Total}}]byte

        func New{{$root.Data.Name}}Viewer(reader *karmem.Reader, offset uint32) (v *{{$root.Data.Name}}Viewer) {
        if !reader.IsValidOffset(offset, {{$root.Data.Size.Minimum}}) {
        return (*{{$root.Data.Name}}Viewer)(unsafe.Pointer(&_Null))
        }
        v = (*{{$root.Data.Name}}Viewer)(unsafe.Add(reader.Pointer, offset))
        {{- if $root.Data.IsTable}}
            if !reader.IsValidOffset(offset, v.size()) {
            return (*{{$root.Data.Name}}Viewer)(unsafe.Pointer(&_Null))
            }
        {{- end}}
        return v
        }

        func (x *{{$root.Data.Name}}Viewer) size() uint32 {
        {{- if $root.Data.IsTable}}
            return *(*uint32)(unsafe.Pointer(x))
        {{- else}}
            return {{$root.Data.Size.Total}}
        {{- end }}
        }

        {{- range $field := $root.Data.Fields }}
            func (x *{{$root.Data.Name}}Viewer) {{$field.Data.Name}}({{- if not $field.Data.Type.IsInline}}reader *karmem.Reader{{- end}}) (v {{ToTypeView $field.Data.Type}}) {
            {{- if $root.Data.IsTable}}
                if {{$field.Data.Offset}} + {{$field.Data.Size.Field}} > x.size() {
                {{- if or (and $field.Data.Type.IsBasic $field.Data.Type.IsNative) (or $field.Data.Type.IsString $field.Data.Type.IsEnum) }}
                    return v
                {{- else}}
                    {{- if or $field.Data.Type.IsSlice $field.Data.Type.IsArray}}
                        return {{ToTypeView $field.Data.Type}}{}
                    {{- else }}
                        return (*{{ToPlainType $field.Data.Type}}Viewer)(unsafe.Pointer(&_Null))
                    {{- end }}
                {{- end}}
                }
            {{- end}}

            {{- if $field.Data.Type.IsInline}}
                {{- if not $field.Data.Type.IsArray}}
                    {{- if or $field.Data.Type.IsNative $field.Data.Type.IsEnum }}
                        return *(*{{ToTypeView $field.Data.Type}})(unsafe.Add(unsafe.Pointer(x), {{$field.Data.Offset}}))
                    {{- else}}
                        return ({{ToTypeView $field.Data.Type}})(unsafe.Add(unsafe.Pointer(x), {{$field.Data.Offset}}))
                    {{- end}}
                {{- else}}
                    slice := [3]uintptr{
                    uintptr(unsafe.Add(unsafe.Pointer(x), {{$field.Data.Offset}})), {{$field.Data.Type.Length}}, {{$field.Data.Type.Length}},
                    }
                    return *(*{{ToTypeView $field.Data.Type}})(unsafe.Pointer(&slice))
                {{- end}}
            {{- else }}
                offset := *(*uint32)(unsafe.Add(unsafe.Pointer(x), {{$field.Data.Offset}}))
                {{- if $field.Data.Type.IsSlice}}
                    size := *(*uint32)(unsafe.Add(unsafe.Pointer(x), {{$field.Data.Offset}} + 4))
                    if !reader.IsValidOffset(offset, size) {
                    {{- if $field.Data.Type.IsString }}
                        return ""
                    {{- else}}
                        return {{ToTypeView $field.Data.Type}}{}
                    {{- end}}
                    }
                    length := uintptr(size / {{$field.Data.Size.Allocation}})
                    {{- if $field.Data.Type.IsLimited }}
                        if length > {{$field.Data.Type.Length}} {
                        length = {{$field.Data.Type.Length}}
                        }
                    {{- end }}
                    slice := [3]uintptr{
                    uintptr(unsafe.Add(reader.Pointer, offset)), length, length,
                    }
                    return *(*{{ToTypeView $field.Data.Type}})(unsafe.Pointer(&slice))
                {{- else}}
                    return New{{ToType $field.Data.Type}}Viewer(reader, offset)
                {{- end}}
            {{- end}}
            }
        {{- end}}

    {{- end }}
{{end}}