{{- define "header"}}
import {{FromTags "import"}}

var _Null : [UInt8] = Array(repeating: 0, count: {{.Size.Largest}})
var _NullReader = karmem.NewReader(_Null)
{{- end}}
{{define "enums"}}
{{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}
{{- range $root := .Enums}}

public typealias Enum{{$root.Data.Name}} = {{ToType $root.Data.Type}}
{{- range $field := $root.Data.Fields }}
public let Enum{{$root.Data.Name}}{{$field.Data.Name}} : Enum{{$root.Data.Name}} = {{$field.Data.Value}}
{{- end }}
{{end}}
{{end}}

{{define "enums_builder"}}
{{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}

{{end}}
{{define "struct"}}
{{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}

public typealias EnumPacketIdentifier = UInt64

{{- range $root := .Structs}}
public let EnumPacketIdentifier{{$root.Data.Name}} : EnumPacketIdentifier = {{$root.Data.ID}}
{{- end }}

{{range $root := .Structs}}

public struct {{$root.Data.Name}} {
    {{- range $field := $root.Data.Fields }}
        {{- if $field.Data.Type.IsBasic }}
        {{- if or $field.Data.Type.IsNative $field.Data.Type.IsEnum }}
    public var {{ $field.Data.Name }}: {{ToType $field.Data.Type}} = {{ToDefault $field.Data.Type}}
        {{- else }}
    public var {{ $field.Data.Name }}: {{ToType $field.Data.Type}} = {{ToType $field.Data.Type}}()
        {{- end}}
        {{- else }}
        {{- if $field.Data.Type.IsSlice }}
    public var {{ $field.Data.Name }}: {{ToType $field.Data.Type}} = {{ToType $field.Data.Type}}()
        {{- else}}
        {{- if $field.Data.Type.IsNative }}
    public var {{ $field.Data.Name }}: {{ToType $field.Data.Type}} = Array(repeating: {{ToPlainType $field.Data.Type}}({{ToDefault $field.Data.Type}}), count: {{$field.Data.Type.Length}})
        {{- else }}
    public var {{ $field.Data.Name }}: {{ToType $field.Data.Type}} = Array(repeating: {{ToPlainType $field.Data.Type}}(), count: {{$field.Data.Type.Length}})
        {{- end}}
        {{- end}}
        {{- end }}
    {{- end }}

    public init() {}

    public func PacketIdentifier() -> EnumPacketIdentifier {
        return EnumPacketIdentifier{{$root.Data.Name}}
    }

    public mutating func Reset() -> () {
        {{- range $field := $root.Data.Fields }}
        {{- if $field.Data.Type.IsBasic }}
        {{- if or $field.Data.Type.IsNative $field.Data.Type.IsEnum }}
        self.{{ $field.Data.Name }} = {{ToDefault $field.Data.Type}}
        {{- else}}
        self.{{ $field.Data.Name }}.Reset()
        {{- end}}
        {{- end }}
        {{- if $field.Data.Type.IsArray }}
        self.{{$field.Data.Name}}.removeAll(keepingCapacity: true)
        {{- end }}
        {{- if $field.Data.Type.IsSlice }}
        self.{{$field.Data.Name}}.removeAll(keepingCapacity: true)
        {{- end }}
        {{- end }}
    }

    @inline(__always)
    public mutating func WriteAsRoot(_ writer: inout karmem.Writer)  -> Bool {
        return self.Write(&writer, 0)
    }

    public mutating func Write(_ writer: inout karmem.Writer, _ start: UInt32) -> Bool {
        var offset = start
        let size: UInt32 = {{$root.Data.Size.Total}}
        if (offset == 0) {
            offset = writer.Alloc(size)
            if (offset == 0xFFFFFFFF) {
                return false
            }
        }

        {{- if $root.Data.IsTable }}
        writer.memory.storeBytes(of: UInt32({{$root.Data.Size.Content}}), toByteOffset: Int(offset), as: UInt32.self)
        {{- end }}

        {{- range $field := $root.Data.Fields }}
        {{- if not $field.Data.Type.IsInline}}
        {{- if $field.Data.Type.IsBasic}}
            {{- if $field.Data.Type.IsNative }}
        let __{{$field.Data.Name}}Size: UInt32 = {{$field.Data.Size.Allocation}}
            {{- else }}
        let __{{$field.Data.Name}}Size: UInt32 = {{$field.Data.Size.Allocation}}
            {{- end }}
        {{- else}}
            {{- if $field.Data.Type.IsNative }}
        let __{{$field.Data.Name}}Size: UInt32 = {{$field.Data.Size.Allocation}} * UInt32(self.{{$field.Data.Name}}.count)
            {{- else }}
        let __{{$field.Data.Name}}Size: UInt32 = {{$field.Data.Size.Allocation}} * UInt32(self.{{$field.Data.Name}}.count)
            {{- end }}
        {{- end}}
        {{- end }}
        {{- if $field.Data.Type.IsInline }}
        let __{{$field.Data.Name}}Offset: UInt32 = offset + {{$field.Data.Offset}}
        {{- else }}
        let __{{$field.Data.Name}}Offset = writer.Alloc(__{{$field.Data.Name}}Size)
        if (__{{$field.Data.Name}}Offset == 0) {
            return false
        }
        writer.memory.storeBytes(of: UInt32(__{{$field.Data.Name}}Offset), toByteOffset: Int(offset + {{$field.Data.Offset}}), as: UInt32.self)
            {{- if $field.Data.Type.IsSlice }}
        writer.memory.storeBytes(of: UInt32(__{{$field.Data.Name}}Size), toByteOffset: Int(offset + {{$field.Data.Offset}} + 4), as: UInt32.self)
            {{- if not $root.Data.Packed }}
        writer.memory.storeBytes(of: UInt32({{$field.Data.Size.Allocation}}), toByteOffset: Int(offset + {{$field.Data.Offset}} + 4 + 4), as: UInt32.self)
            {{- end }}
            {{- end}}
        {{- end }}
        {{- if or $field.Data.Type.IsNative $field.Data.Type.IsEnum }}
        {{- if $field.Data.Type.IsInline}}
        {{- if $field.Data.Type.IsArray}}
        var __{{$field.Data.Name}}Index = 0
        var __{{$field.Data.Name}}CurrentOffset = __{{$field.Data.Name}}Offset
        while(__{{$field.Data.Name}}Index < self.{{$field.Data.Name}}.count) {
            writer.memory.storeBytes(of: self.{{$field.Data.Name}}[__{{$field.Data.Name}}Index], toByteOffset: Int(__{{$field.Data.Name}}CurrentOffset), as: {{- if $field.Data.Type.IsString}} UInt8.self {{ else }}{{ToPlainType $field.Data.Type}}.self{{end}})
            __{{$field.Data.Name}}Index = __{{$field.Data.Name}}Index + 1
            __{{$field.Data.Name}}CurrentOffset = __{{$field.Data.Name}}CurrentOffset + {{$field.Data.Size.Allocation}}
        }
        {{- else}}
        {{- if $field.Data.Type.IsEnum}}
        writer.memory.storeBytes(of: self.{{$field.Data.Name}}, toByteOffset: Int(__{{$field.Data.Name}}Offset), as: {{- ToPlainType $field.Data.Type}}.self)
        {{- else}}
        writer.memory.storeBytes(of: self.{{$field.Data.Name}}, toByteOffset: Int(__{{$field.Data.Name}}Offset), as: {{- ToPlainType $field.Data.Type}}.self)
        {{- end}}
        {{- end}}
        {{- else}}
        {{- if $field.Data.Type.IsSlice}}
        var __{{$field.Data.Name}}Index = 0
        var __{{$field.Data.Name}}CurrentOffset = __{{$field.Data.Name}}Offset
        while(__{{$field.Data.Name}}Index < self.{{$field.Data.Name}}.count) {
            writer.memory.storeBytes(of: self.{{$field.Data.Name}}[__{{$field.Data.Name}}Index], toByteOffset: Int(__{{$field.Data.Name}}CurrentOffset), as: {{- if $field.Data.Type.IsString}} UInt8.self {{ else }}{{ToPlainType $field.Data.Type}}.self{{end}})
            __{{$field.Data.Name}}Index = __{{$field.Data.Name}}Index + 1
            __{{$field.Data.Name}}CurrentOffset = __{{$field.Data.Name}}CurrentOffset + {{$field.Data.Size.Allocation}}
        }
        {{- else}}
        writer.memory.storeBytes(of: self.{{$field.Data.Name}}, toByteOffset: Int(__{{$field.Data.Name}}Offset), as: {{- ToPlainType $field.Data.Type}}.self)
        {{- end}}
        {{- end}}
        {{- else }}
        {{- if $field.Data.Type.IsBasic}}
        if (!self.{{$field.Data.Name}}.Write(&writer, __{{$field.Data.Name}}Offset)) {
            return false
        }
        {{- else}}
        let __{{$field.Data.Name}}Len = self.{{$field.Data.Name}}.count
        var __{{$field.Data.Name}}Index = 0
        while (__{{$field.Data.Name}}Index < __{{$field.Data.Name}}Len) {
            if (!self.{{$field.Data.Name}}[__{{$field.Data.Name}}Index].Write(&writer, __{{$field.Data.Name}}Offset + (UInt32(__{{$field.Data.Name}}Index) * {{$field.Data.Size.Allocation}}))) {
                return false
            }
            __{{$field.Data.Name}}Index = __{{$field.Data.Name}}Index + 1
        }
        {{- end}}
        {{- end}}
        {{- end}}

        return true
    }

    @inline(__always)
    public mutating func ReadAsRoot(_ reader: karmem.Reader) -> () {
        self.Read(New{{$root.Data.Name}}Viewer(reader, 0), reader)
    }

    @inline(__always)
    public mutating func Read(_ viewer: {{$root.Data.Name}}Viewer, _ reader: karmem.Reader) -> () {
    {{- range $field := $root.Data.Fields }}
    {{- if $field.Data.Type.IsBasic}}
    {{- if $field.Data.Type.IsEnum}}
    self.{{$field.Data.Name}} = viewer.{{$field.Data.Name}}()
    {{- else}}
    {{- if $field.Data.Type.IsNative}}
    self.{{$field.Data.Name}} = viewer.{{$field.Data.Name}}()
    {{- else}}
    self.{{$field.Data.Name}}.Read(viewer.{{$field.Data.Name}}({{- if not $field.Data.Type.IsInline}}reader{{- end}}), reader)
    {{- end}}
    {{- end}}
    {{- else}}
    {{- if $field.Data.Type.IsBasic}}
    self.{{$field.Data.Name}}.Read(viewer.{{$field.Data.Name}}(reader), reader)
    {{- end}}
    {{- if $field.Data.Type.IsSlice}}
    var __{{$field.Data.Name}}Slice = viewer.{{$field.Data.Name}}(reader)
    let __{{$field.Data.Name}}Len = __{{$field.Data.Name}}Slice.count
    self.{{$field.Data.Name}}.removeAll(keepingCapacity: true)
    if (__{{$field.Data.Name}}Len > self.{{$field.Data.Name}}.count) {
        self.{{$field.Data.Name}}.reserveCapacity(__{{$field.Data.Name}}Len)
        var __{{$field.Data.Name}}IndexClear = self.{{$field.Data.Name}}.count
        while(__{{$field.Data.Name}}IndexClear < __{{$field.Data.Name}}Len) {
            {{- if $field.Data.Type.IsNative}}
                {{- if $field.Data.Type.IsString}}
            self.{{$field.Data.Name}}.append(0)
                {{- else }}
            self.{{$field.Data.Name}}.append({{ToDefault $field.Data.Type}})
                {{- end}}
            {{- else}}
            self.{{$field.Data.Name}}.append(New{{ToPlainType $field.Data.Type}}())
            {{- end}}
            __{{$field.Data.Name}}IndexClear = __{{$field.Data.Name}}IndexClear + 1
        }
    }
    {{- else}}
    var __{{$field.Data.Name}}Slice = viewer.{{$field.Data.Name}}()
    var __{{$field.Data.Name}}Len = __{{$field.Data.Name}}Slice.count
    if (__{{$field.Data.Name}}Len > {{$field.Data.Type.Length}}) {
        __{{$field.Data.Name}}Len = {{$field.Data.Type.Length}}
    }
    {{- end }}
    {{- if $field.Data.Type.IsNative}}
    var __{{$field.Data.Name}}Index = 0
    while (__{{$field.Data.Name}}Index < __{{$field.Data.Name}}Len) {
        self.{{$field.Data.Name}}[__{{$field.Data.Name}}Index] = __{{$field.Data.Name}}Slice[__{{$field.Data.Name}}Index]
        __{{$field.Data.Name}}Index = __{{$field.Data.Name}}Index + 1
    }
    {{- if $field.Data.Type.IsArray}}
    while (__{{$field.Data.Name}}Index < self.{{$field.Data.Name}}.count) {
        self.{{$field.Data.Name}}[__{{$field.Data.Name}}Index] = {{- if $field.Data.Type.IsString}} UInt8(0){{- else}} {{ToDefault $field.Data.Type}}{{- end}}
        __{{$field.Data.Name}}Index = __{{$field.Data.Name}}Index + 1
    }
    {{- end}}
    {{- else}}
    var __{{$field.Data.Name}}Index = 0
    while (__{{$field.Data.Name}}Index < __{{$field.Data.Name}}Len) {
        self.{{$field.Data.Name}}[__{{$field.Data.Name}}Index].Read(__{{$field.Data.Name}}Slice[__{{$field.Data.Name}}Index], reader)
        __{{$field.Data.Name}}Index = __{{$field.Data.Name}}Index + 1
    }
    {{- if $field.Data.Type.IsArray}}
    while (__{{$field.Data.Name}}Index < self.{{$field.Data.Name}}.count) {
        self.{{$field.Data.Name}}[__{{$field.Data.Name}}Index].Reset()
        __{{$field.Data.Name}}Index = __{{$field.Data.Name}}Index + 1
    }
    {{- end}}
    {{- end }}
    {{- end}}
    {{- end }}
    }

}

public func New{{$root.Data.Name}}() -> {{$root.Data.Name}} {
    return {{$root.Data.Name}}()
}
{{- end}}
{{end}}
{{define "struct_builder"}}
{{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}
{{- range $root := .Structs}}

public struct {{$root.Data.Name}}Viewer : karmem.StructureViewer {
    var _ptr : UnsafeRawPointer
    public var karmemPointer: UnsafeRawPointer { get { return self._ptr } set(newValue) { self._ptr = newValue } }

    public init(ptr: UnsafeRawPointer) {
        self._ptr = ptr
        self.karmemPointer = ptr
    }

    @inline(__always)
    public func SizeOf() -> UInt32 {
        {{- if $root.Data.IsTable}}
        return self.karmemPointer.loadUnaligned(as: UInt32.self)
        {{- else }}
        return {{$root.Data.Size.Total}}
        {{- end }}
    }

    {{- range $field := $root.Data.Fields }}
    @inline(__always)
    public func {{$field.Data.Name}}({{- if not $field.Data.Type.IsInline}}_ reader: karmem.Reader{{- end}}) -> {{ToTypeView $field.Data.Type}} {
    {{- if $root.Data.IsTable}}
        if ((UInt32({{$field.Data.Offset}}) + UInt32({{$field.Data.Size.Field}})) > self.SizeOf()) {
            {{- if (or (and $field.Data.Type.IsNative $field.Data.Type.IsBasic) $field.Data.Type.IsEnum) }}
            return {{ToDefault $field.Data.Type}}
            {{- else}}
            {{- if or $field.Data.Type.IsSlice $field.Data.Type.IsArray }}
            {{- if $field.Data.Type.IsNative}}
                return karmem.NewSliceUnaligned(_Null.withUnsafeBufferPointer({ return UnsafeRawPointer($0.baseAddress!) }), 0, 0, as: {{- if $field.Data.Type.IsString}} UInt8.self {{- else}} {{ToPlainType $field.Data.Type}}.self {{- end}})
            {{- else }}
                return karmem.NewSliceStructure(_Null.withUnsafeBufferPointer({ return UnsafeRawPointer($0.baseAddress!) }), 0, 0, as: {{- ToPlainType $field.Data.Type}}Viewer.self)
            {{- end }}
            {{- else}}
            return {{ToPlainTypeView $field.Data.Type}}(ptr: _Null.withUnsafeBufferPointer({ return UnsafeRawPointer($0.baseAddress!) }))
            {{- end}}
            {{- end}}
        }
    {{- end}}

        {{- if $field.Data.Type.IsInline}}
        {{- if not $field.Data.Type.IsArray}}
        {{- if or $field.Data.Type.IsNative $field.Data.Type.IsEnum}}
        return (self.karmemPointer + {{$field.Data.Offset}}).loadUnaligned(as: {{ ToTypeView $field.Data.Type }}.self)
        {{- else }}
        return  {{ ToTypeView $field.Data.Type }}(ptr: self.karmemPointer + {{$field.Data.Offset}})
        {{- end }}
        {{- else }}
        {{- if $field.Data.Type.IsNative}}
        return karmem.NewSliceUnaligned(UnsafeRawPointer(self.karmemPointer + Int({{$field.Data.Offset}})), {{$field.Data.Type.Length}}, {{$field.Data.Size.Allocation}}, as: {{- if $field.Data.Type.IsString}} UInt8.self {{- else}} {{ToPlainType $field.Data.Type}}.self {{- end}})
        {{- else }}
        return karmem.NewSliceStructure(UnsafeRawPointer(self.karmemPointer + Int({{$field.Data.Offset}})), {{$field.Data.Type.Length}}, {{$field.Data.Size.Allocation}}, as: {{- ToPlainType $field.Data.Type}}Viewer.self)
        {{- end }}
        {{- end }}
        {{- else }}
        let offset = (self.karmemPointer + {{$field.Data.Offset}}).loadUnaligned(as: UInt32.self)
        {{- if $field.Data.Type.IsSlice}}
        let size = (self.karmemPointer + {{$field.Data.Offset}} + 4).loadUnaligned(as: UInt32.self)
        if (!reader.IsValidOffset(offset, size)) {
            {{- if $field.Data.Type.IsNative}}
                return karmem.NewSliceUnaligned(_Null.withUnsafeBufferPointer({ return UnsafeRawPointer($0.baseAddress!) }), 0, 0, as: {{- if $field.Data.Type.IsString}} UInt8.self {{- else}} {{ToPlainType $field.Data.Type}}.self {{- end}})
            {{- else }}
                return karmem.NewSliceStructure(_Null.withUnsafeBufferPointer({ return UnsafeRawPointer($0.baseAddress!) }), 0, 0, as: {{- ToPlainType $field.Data.Type}}Viewer.self)
            {{- end }}
        }

        var length = size / {{ $field.Data.Size.Allocation }}
        {{- if $field.Data.Type.IsLimited }}
        if (length > {{$field.Data.Type.Length}}) {
            length = {{$field.Data.Type.Length}}
        }
        {{- end}}
        {{- if $field.Data.Type.IsNative}}
        return karmem.NewSliceUnaligned(UnsafeRawPointer(reader.pointer + Int(offset)), length, {{ $field.Data.Size.Allocation }}, as: {{- if $field.Data.Type.IsString}} UInt8.self {{- else}} {{ToPlainType $field.Data.Type}}.self {{- end}})
        {{- else }}
        return karmem.NewSliceStructure(UnsafeRawPointer(reader.pointer + Int(offset)), length, {{ $field.Data.Size.Allocation }}, as: {{- ToPlainType $field.Data.Type}}Viewer.self)
        {{- end }}
        {{- else}}
        return New{{ToPlainType $field.Data.Type}}Viewer(reader, offset)
        {{- end}}
        {{- end}}
    }
    {{- end}}
}

@inline(__always) public func New{{$root.Data.Name}}Viewer(_ reader: karmem.Reader, _ offset: UInt32) -> {{$root.Data.Name}}Viewer {
    if (!reader.IsValidOffset(offset, {{$root.Data.Size.Minimum}})) {
        return {{$root.Data.Name}}Viewer(ptr: _Null.withUnsafeBufferPointer({ return UnsafePointer($0.baseAddress!) }))
    }

    let v = {{$root.Data.Name}}Viewer(ptr: UnsafeRawPointer(reader.pointer + Int(offset)))
    {{- if $root.Data.IsTable}}
    if (!reader.IsValidOffset(offset, v.SizeOf())) {
        return {{$root.Data.Name}}Viewer(ptr: _Null.withUnsafeBufferPointer({ return UnsafeRawPointer($0.baseAddress!) }))
    }
    {{- end}}
    return v
}
{{- end}}
{{end}}