{{define "header"}}
const std = @import("std");
const karmem = @import("{{FromTags "import"}}");
const testing = std.testing;
const Allocator = std.mem.Allocator;
const mem = @import("std").mem;

var _Null: [{{.Size.Largest}}]u8 = [_]u8{ 0 } ** {{.Size.Largest}};
var _NullReader: karmem.Reader = karmem.NewReader(std.heap.page_allocator, _Null[0..{{.Size.Largest}}]);
{{end}}

{{define "enums"}}
    {{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}
    {{- range $root := .Enums}}

pub const Enum{{$root.Data.Name}} = enum({{ToType $root.Data.Type}}) {
  {{- range $field := $root.Data.Fields }}
    {{$field.Data.Name}} = {{$field.Data.Value}},
  {{- end }}
};

const DefaultEnum{{$root.Data.Name}} = Enum{{$root.Data.Name}}.{{(index $root.Data.Fields 0).Data.Name}};

    {{- end}}
{{end}}

{{define "enums_builder"}}
    {{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}

{{end}}

{{define "struct"}}
    {{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}

pub const EnumPacketIdentifier = enum(u64) {
  {{- range $root := .Structs}}
    {{$root.Data.Name}} = {{$root.Data.ID}},
  {{- end }}
};

    {{range $root := .Structs}}
pub const {{$root.Data.Name}} = struct {
{{- range $field := $root.Data.Fields }}
    {{ $field.Data.Name }}: {{ToType $field.Data.Type}} = {{- if or (and $field.Data.Type.IsBasic $field.Data.Type.IsNative) $field.Data.Type.IsEnum }}{{- if $field.Data.Type.IsEnum}} Default{{ToType $field.Data.Type}} {{- else }} {{ToDefault $field.Data.Type}}{{- end}}{{- else}}{{- if $field.Data.Type.IsBasic }} New{{ToType $field.Data.Type}}(){{- else}} {{- if $field.Data.Type.IsArray}} [_]{{ToPlainType $field.Data.Type}}{ {{- if $field.Data.Type.IsNative}}{{ToDefault $field.Data.Type}}{{- else }}New{{ToPlainType $field.Data.Type}}(){{- end}}} ** {{$field.Data.Type.Length}}{{- else}} {{- if $field.Data.Type.IsString}} &[_]u8{} {{- else }} &[_]{{ToPlainType $field.Data.Type}}{}{{- end}}{{- end}}{{- end }}{{- end}},

    {{- if $field.Data.Type.IsSlice }}
    _{{ $field.Data.Name }}Capacity: usize = 0,
    {{- end }}
{{- end }}

    pub fn PacketIdentifier() EnumPacketIdentifier {
        return EnumPacketIdentifier.{{$root.Data.Name}};
    }  

    pub fn Reset(x: *{{$root.Data.Name}}) void {
        {{$root.Data.Name}}.Read(x, @ptrCast(*{{$root.Data.Name}}Viewer, &_Null[0]), &_NullReader) catch unreachable;
    }

    pub fn WriteAsRoot(x: *{{$root.Data.Name}}, writer: *karmem.Writer) Allocator.Error!u32 {
        return {{$root.Data.Name}}.Write(x, writer, 0);
    }

    pub fn Write(x: *{{$root.Data.Name}}, writer: *karmem.Writer, start: usize) Allocator.Error!u32 {
        var offset: u32 = @intCast(u32, start);
        var size: u32 = {{$root.Data.Size.Total}};
        if (offset == 0) {
            offset = try karmem.Writer.Alloc(writer, size);
        }


        {{- if $root.Data.IsTable }}
        var sizeData: u32 = {{$root.Data.Size.Content}};
        karmem.Writer.WriteAt(writer, offset, @ptrCast([*]const u8, &sizeData), 4);
        {{- end }}

{{- range $field := $root.Data.Fields }}
    {{- if or (not $field.Data.Type.IsInline) $field.Data.Type.IsArray }}
    {{- if $field.Data.Type.IsBasic}}
        var __{{$field.Data.Name}}Size: usize = {{$field.Data.Size.Allocation}};
    {{- else}}
        var __{{$field.Data.Name}}Size: usize = {{$field.Data.Size.Allocation}} * x.{{$field.Data.Name}}.len;
    {{- end}}
    {{- end}}
    {{- if $field.Data.Type.IsInline }}
        var __{{$field.Data.Name}}Offset = offset + {{$field.Data.Offset}};
    {{- else }}
        var __{{$field.Data.Name}}Offset = try karmem.Writer.Alloc(writer, __{{$field.Data.Name}}Size);

        karmem.Writer.WriteAt(writer, offset+{{$field.Data.Offset}}, @ptrCast([*]const u8, &__{{$field.Data.Name}}Offset), 4);
        {{- if $field.Data.Type.IsSlice}}
        karmem.Writer.WriteAt(writer, offset+{{$field.Data.Offset}}+4, @ptrCast([*]const u8, &__{{$field.Data.Name}}Size), 4);
            {{- if not $root.Data.Packed}}
        var __{{$field.Data.Name}}SizeEach: u32 = {{$field.Data.Size.Allocation}};
        karmem.Writer.WriteAt(writer, offset+{{$field.Data.Offset}}+4+4, @ptrCast([*]const u8, &__{{$field.Data.Name}}SizeEach), 4);
            {{- end}}
        {{- end }}
    {{- end }}
    {{- if or $field.Data.Type.IsNative $field.Data.Type.IsEnum }}
        {{- if $field.Data.Type.IsSlice }}
            {{- if $field.Data.Type.IsString }}
        karmem.Writer.WriteAt(writer, __{{$field.Data.Name}}Offset, x.{{$field.Data.Name}}.ptr, __{{$field.Data.Name}}Size);
            {{- else }}
        karmem.Writer.WriteAt(writer, __{{$field.Data.Name}}Offset, @ptrCast(*[]const u8, &x.{{$field.Data.Name}}).ptr, __{{$field.Data.Name}}Size);
            {{- end }}
        {{- else }}
            {{- if $field.Data.Type.IsArray }}
        karmem.Writer.WriteAt(writer, __{{$field.Data.Name}}Offset, @ptrCast([*]const u8, &x.{{$field.Data.Name}}), __{{$field.Data.Name}}Size);
            {{- else }}
        karmem.Writer.WriteAt(writer, __{{$field.Data.Name}}Offset, @ptrCast([*]const u8, &x.{{$field.Data.Name}}), {{$field.Data.Size.Allocation}});
            {{- end }}
        {{- end }}
    {{- else }}
        {{- if $field.Data.Type.IsBasic}}
        _ = try {{ToPlainType $field.Data.Type}}.Write(&x.{{$field.Data.Name}}, writer, __{{$field.Data.Name}}Offset);
        {{- else}}
        var __{{$field.Data.Name}}Index: usize = 0;
        var __{{$field.Data.Name}}End: usize = __{{$field.Data.Name}}Offset + __{{$field.Data.Name}}Size;
        while (__{{$field.Data.Name}}Offset < __{{$field.Data.Name}}End) {
            _ = try {{ToPlainType $field.Data.Type}}.Write(&x.{{$field.Data.Name}}[__{{$field.Data.Name}}Index], writer, __{{$field.Data.Name}}Offset);
            __{{$field.Data.Name}}Offset = __{{$field.Data.Name}}Offset + {{$field.Data.Size.Allocation}};
            __{{$field.Data.Name}}Index = __{{$field.Data.Name}}Index + 1;
        }
        {{- end}}
    {{- end}}
{{- end}}

        return offset;
    }

    pub fn ReadAsRoot(x: *{{$root.Data.Name}}, reader: *karmem.Reader) Allocator.Error!void {
        return {{$root.Data.Name}}.Read(x, New{{$root.Data.Name}}Viewer(reader, 0), reader);
    }

    pub fn Read(x: *{{$root.Data.Name}}, viewer: *const {{$root.Data.Name}}Viewer, reader: *karmem.Reader) Allocator.Error!void {
        _ = x;
        _ = reader;
        {{- range $field := $root.Data.Fields }}

{{- if $field.Data.Type.IsBasic}}
    {{- if (or $field.Data.Type.IsEnum $field.Data.Type.IsNative) }}
        x.{{$field.Data.Name}} = {{$root.Data.Name}}Viewer.{{$field.Data.Name}}(viewer);
    {{- else}}
        try {{ToPlainType $field.Data.Type}}.Read(&x.{{$field.Data.Name}}, {{$root.Data.Name}}Viewer.{{$field.Data.Name}}(viewer, {{- if not $field.Data.Type.IsInline}}reader{{- end}}), reader);
    {{- end}}
{{- else}}
    {{- if $field.Data.Type.IsBasic}}
        try {{ToPlainType $field.Data.Type}}.Read(&x.{{$field.Data.Name}}, {{$root.Data.Name}}Viewer.{{$field.Data.Name}}(reader), reader);
    {{- end}}
    {{- if $field.Data.Type.IsSlice}}
        var __{{$field.Data.Name}}Slice: {{ToTypeView $field.Data.Type}} = {{$root.Data.Name}}Viewer.{{$field.Data.Name}}(viewer, reader);
        var __{{$field.Data.Name}}Len: usize = __{{$field.Data.Name}}Slice.len;
        if (__{{$field.Data.Name}}Len > x._{{$field.Data.Name}}Capacity) {
            var __{{$field.Data.Name}}CapacityTarget: usize = __{{$field.Data.Name}}Len;
            var __{{$field.Data.Name}}Alloc = try reader.allocator.reallocAtLeast(x.{{$field.Data.Name}}.ptr[0..x._{{$field.Data.Name}}Capacity], __{{$field.Data.Name}}CapacityTarget);
            var __{{$field.Data.Name}}NewIndex: usize = x._{{$field.Data.Name}}Capacity;
            while (__{{$field.Data.Name}}NewIndex < __{{$field.Data.Name}}Alloc.len) {
                {{- if $field.Data.Type.IsNative}}
                    {{- if $field.Data.Type.IsString }}
                __{{$field.Data.Name}}Alloc[__{{$field.Data.Name}}NewIndex] = 0;
                    {{- else }}
                __{{$field.Data.Name}}Alloc[__{{$field.Data.Name}}NewIndex] = {{ToDefault $field.Data.Type}};
                    {{- end }}
                {{- else }}
                __{{$field.Data.Name}}Alloc[__{{$field.Data.Name}}NewIndex] = New{{ToPlainType $field.Data.Type}}();
                {{- end }}
                __{{$field.Data.Name}}NewIndex = __{{$field.Data.Name}}NewIndex + 1;
            }
            x.{{$field.Data.Name}}.ptr = __{{$field.Data.Name}}Alloc.ptr;
            x.{{$field.Data.Name}}.len = __{{$field.Data.Name}}Len;
            x._{{$field.Data.Name}}Capacity = __{{$field.Data.Name}}Alloc.len;
        }
        if (__{{$field.Data.Name}}Len > x.{{$field.Data.Name}}.len) {
            x.{{$field.Data.Name}}.len = __{{$field.Data.Name}}Len;
        }
    {{- else}}
        var __{{$field.Data.Name}}Slice: {{ToTypeView $field.Data.Type}} = {{$root.Data.Name}}Viewer.{{$field.Data.Name}}(viewer);
        var __{{$field.Data.Name}}Len: usize = __{{$field.Data.Name}}Slice.len;
        if (__{{$field.Data.Name}}Len > {{$field.Data.Type.Length}}) {
            __{{$field.Data.Name}}Len = {{$field.Data.Type.Length}};
        }
    {{- end }}
    {{- if $field.Data.Type.IsNative}}
        var __{{$field.Data.Name}}Index: usize = 0;
        while (__{{$field.Data.Name}}Index < __{{$field.Data.Name}}Len) {
            x.{{$field.Data.Name}}[__{{$field.Data.Name}}Index] = __{{$field.Data.Name}}Slice[__{{$field.Data.Name}}Index];
            __{{$field.Data.Name}}Index = __{{$field.Data.Name}}Index + 1;
        }
        {{- if $field.Data.Type.IsArray}}
        while (__{{$field.Data.Name}}Index < x.{{$field.Data.Name}}.len) {
            {{- if $field.Data.Type.IsString}}
            x.{{$field.Data.Name}}[__{{$field.Data.Name}}Index] = 0;
            {{- else }}
            x.{{$field.Data.Name}}[__{{$field.Data.Name}}Index] = {{ToDefault $field.Data.Type}};
            {{- end }}
            __{{$field.Data.Name}}Index = __{{$field.Data.Name}}Index + 1;
        }
        {{- end}}
    {{- else}}
        var __{{$field.Data.Name}}Index: usize = 0;
        while (__{{$field.Data.Name}}Index < __{{$field.Data.Name}}Len) {
            try {{ToPlainType $field.Data.Type}}.Read(&x.{{$field.Data.Name}}[__{{$field.Data.Name}}Index], &__{{$field.Data.Name}}Slice[__{{$field.Data.Name}}Index], reader);
             __{{$field.Data.Name}}Index = __{{$field.Data.Name}}Index + 1;
        }
        {{- if $field.Data.Type.IsArray}}
        while (__{{$field.Data.Name}}Index < x.{{$field.Data.Name}}.len) {
            {{ToPlainType $field.Data.Type}}.Reset(&x.{{$field.Data.Name}}[__{{$field.Data.Name}}Index]);
            __{{$field.Data.Name}}Index = __{{$field.Data.Name}}Index + 1;
        }
        {{- end }}
    {{- end }}
    {{- if $field.Data.Type.IsSlice}}
        x.{{$field.Data.Name}}.len = __{{$field.Data.Name}}Len;
    {{- end }}
        {{- end}}
    {{- end }}
    }

};


pub fn New{{$root.Data.Name}}() {{$root.Data.Name}} {
    var r: {{$root.Data.Name}} = {{$root.Data.Name}} {};
    return r;
}

    {{- end }}
{{end}}

{{define "struct_builder"}}
    {{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}
    {{- range $root := .Structs}}

pub const {{$root.Data.Name}}Viewer = extern struct {
    _data: [{{$root.Data.Size.Total}}]u8,

    pub fn Size(x: *const {{$root.Data.Name}}Viewer) u32 {
    _ = x;
    {{- if $root.Data.IsTable}}
        return @ptrCast(*align(1) const u32, x._data[0..4]).*;
    {{- else}}
        return {{$root.Data.Size.Total}};
    {{- end }}
    }

        {{- range $field := $root.Data.Fields }}
    pub fn {{$field.Data.Name}}(x: *const {{$root.Data.Name}}Viewer{{- if not $field.Data.Type.IsInline}}, reader: *karmem.Reader{{- end}}) {{ToTypeView $field.Data.Type}} {
        {{- if $root.Data.IsTable}}
        if (({{$field.Data.Offset}} + {{$field.Data.Size.Field}}) > {{$root.Data.Name}}Viewer.Size(x)) {
        {{- if or (and $field.Data.Type.IsBasic $field.Data.Type.IsNative) $field.Data.Type.IsEnum }}
                {{- if $field.Data.Type.IsEnum}}
            return Default{{ToType $field.Data.Type}};
                {{- else}}
            return {{ToDefault $field.Data.Type}};
                {{- end}}
        {{- else}}
        {{- if or $field.Data.Type.IsSlice $field.Data.Type.IsArray }}
        {{- if $field.Data.Type.IsNative}}
            return {{- if $field.Data.Type.IsString}} &[_]u8{}{{- else }} &[_]{{ToPlainType $field.Data.Type}}{}{{- end}};
        {{- else }}
            return &[_]{{ToPlainType $field.Data.Type}}Viewer{};
        {{- end }}
        {{- else }}
        {{- if $field.Data.Type.IsNative}}
            return {{ToDefault $field.Data.Type}};
        {{- else }}
            return @ptrCast(*{{ToPlainType $field.Data.Type}}Viewer, &_Null[0]);
        {{- end }}
        {{- end }}
        {{- end}}
        }
        {{- end}}

        {{- if $field.Data.Type.IsInline}}
{{- if not $field.Data.Type.IsArray}}
    {{- if or $field.Data.Type.IsNative $field.Data.Type.IsEnum }}
        return @ptrCast(*align(1) const {{ToTypeView $field.Data.Type}}, x._data[{{$field.Data.Offset}}..{{$field.Data.Offset}}+@sizeOf({{ToTypeView $field.Data.Type}})]).*;
    {{- else}}
        return @ptrCast({{ToTypeView $field.Data.Type}}, x._data[{{$field.Data.Offset}}..{{$field.Data.Offset}}+@sizeOf({{ToTypeView $field.Data.Type}})]);
    {{- end}}
{{- else}}
        {{- if $field.Data.Type.IsNative }}
        var slice = [2]usize{@ptrToInt(x)+{{$field.Data.Offset}}, {{$field.Data.Type.Length}}};
        return @ptrCast(*align(1) const {{ToTypeView $field.Data.Type}}, &slice).*;
        {{- else }}
        var slice = [2]usize{@ptrToInt(x)+{{$field.Data.Offset}}, {{$field.Data.Type.Length}}};
        return @ptrCast(*align(1) const []{{ToPlainType $field.Data.Type}}Viewer, &slice).*;
        {{- end }}
{{- end}}
{{- else }}
        var offset = @ptrCast(*align(1) const u32, x._data[{{$field.Data.Offset}}..{{$field.Data.Offset}}+4]).*;
    {{- if $field.Data.Type.IsSlice}}
        var size = @ptrCast(*align(1) const u32, x._data[{{$field.Data.Offset}}+4..{{$field.Data.Offset}}+4+4]).*;
        if (!karmem.Reader.IsValidOffset(reader, offset, size)) {
        {{- if $field.Data.Type.IsNative}}
            return {{- if $field.Data.Type.IsString}}&[_]u8{}{{- else }}&[_]{{ToPlainType $field.Data.Type}}{}{{- end}};
        {{- else }}
            return &[_]{{ToPlainType $field.Data.Type}}Viewer{};
        {{- end }}
        }
        var length = size / {{$field.Data.Size.Allocation}};
        {{- if $field.Data.Type.IsLimited }}
        if (length > {{$field.Data.Type.Length}}) {
            length = {{$field.Data.Type.Length}};
        }
        {{- end }}
        var slice = [2]usize{@ptrToInt(reader.memory.ptr)+offset, length};
        return @ptrCast(*{{ToTypeView $field.Data.Type}}, &slice).*;
    {{- else}}
         return New{{ToPlainType $field.Data.Type}}Viewer(reader, offset);
    {{- end}}
{{- end}}
    }
{{- end}}

};

pub fn New{{$root.Data.Name}}Viewer(reader: *karmem.Reader, offset: u32) *const {{$root.Data.Name}}Viewer {
    if (!karmem.Reader.IsValidOffset(reader, offset, {{$root.Data.Size.Minimum}})) {
        return @ptrCast(*{{$root.Data.Name}}Viewer, &_Null[0]);
    }
    var v = @ptrCast(*align(1) const {{$root.Data.Name}}Viewer, reader.memory[offset..offset+{{$root.Data.Size.Minimum}}]);
    {{- if $root.Data.IsTable}}
    if (!karmem.Reader.IsValidOffset(reader, offset, {{$root.Data.Name}}Viewer.Size(v))) {
        return @ptrCast(*{{$root.Data.Name}}Viewer, &_Null[0]);
    }
    {{- end}}
    return v;
}
    {{- end }}
{{end}}